import os
import logging
import re
from io import BytesIO
from telegram import Update, InputFile
from telegram.ext import Application, MessageHandler, ContextTypes, filters
from openpyxl import Workbook

# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.environ.get("BOT_TOKEN")

# üì¶ –ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ—Å—Ç–∞
def parse_quiz(text):
    questions = []
    blocks = re.split(r'\n{2,}', text.strip())

    for block in blocks:
        lines = block.strip().split('\n')
        if len(lines) < 2:
            continue  # –°–ª–∏—à–∫–æ–º –º–∞–ª–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞

        question_text = lines[0].strip()
        options = []
        correct_raw = ""

        for line in lines[1:]:
            if re.match(r'^(–æ—Ç–≤–µ—Ç|answer|–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç)[:\-]?', line.strip().lower()):
                correct_raw = line.split(':', 1)[-1].strip()
            elif re.match(r'^[a–∞b–±–≤c–≥d–µe]\)', line.strip().lower()):
                options.append(re.sub(r'^[a–∞b–±–≤c–≥d–µe]\)\s*', '', line.strip(), flags=re.I))
            else:
                options.append(line.strip())

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–æ–ø—Ä–æ—Å–∞
        if not options:
            qtype = "Fill-in-the-Blank" if correct_raw else "Open-Ended"
        elif ',' in correct_raw:
            qtype = "Checkbox"
        elif correct_raw:
            qtype = "Multiple Choice"
        else:
            qtype = "Poll"

        # –ò–Ω–¥–µ–∫—Å—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        correct_index = []
        for ans in re.split(r'[,\s]+', correct_raw):
            ans = ans.lower().strip()
            index_map = {'–∞': 1, '–±': 2, '–≤': 3, '–≥': 4, '–¥': 5, 'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}
            if ans in index_map:
                correct_index.append(index_map[ans])
            elif ans.isdigit():
                correct_index.append(int(ans))
        correct_index = ','.join(map(str, correct_index)) if correct_index else ""

        while len(options) < 5:
            options.append("")

        questions.append([question_text, qtype] + options[:5] + [correct_index])

    return questions

# üìÑ –°–æ–∑–¥–∞–Ω–∏–µ Excel-—Ñ–∞–π–ª–∞
def create_excel(questions):
    wb = Workbook()
    ws = wb.active
    ws.append([
        "Question Text", "Question Type", "Option 1", "Option 2", "Option 3",
        "Option 4", "Option 5", "Correct Answer"
    ])
    for q in questions:
        ws.append(q)

    buffer = BytesIO()
    wb.save(buffer)
    buffer.seek(0)
    return buffer

# ü§ñ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    questions = parse_quiz(text)

    if not questions:
        await update.message.reply_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞.\n\n"
            "–ü—Ä–∏–º–µ—Ä —Ñ–æ—Ä–º–∞—Ç–∞:\n\n"
            "1. –ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª ¬´–í–æ–π–Ω—É –∏ –º–∏—Ä¬ª?\n"
            "–∞) –ß–µ—Ö–æ–≤\n"
            "–±) –ü—É—à–∫–∏–Ω\n"
            "–≤) –¢–æ–ª—Å—Ç–æ–π\n"
            "–≥) –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π\n"
            "–û—Ç–≤–µ—Ç: –≤"
        )
        return

    excel_file = create_excel(questions)
    await update.message.reply_document(
        document=InputFile(excel_file, filename="quiz.xlsx"),
        caption="‚úÖ –í–∞—à —Ç–µ—Å—Ç –≥–æ—Ç–æ–≤!"
    )

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
